{"version":3,"sources":["resources/character_sheet.pdf","logo.svg","utils/list-random.js","genfuncs/get-race.js","utils/random-draw.js","genfuncs/get-name.js","utils/limit-list-join.js","genfuncs/get-gender.js","utils/roll.js","genfuncs/roll-stats.js","genfuncs/get-age.js","genfuncs/get-class.js","datasets/short-sets.js","genfuncs/get-alignment.js","genfuncs/get-values.js","datasets/valueGoals.js","genfuncs/get-goals.js","genfuncs/get-traits.js","utils/caps-formatter.js","datasets/vocabularies.js","genfuncs/get-vocab.js","view/components/list.js","view/components/box.js","view/components/brackets.js","view/components/description.js","view/components/stat-list.js","view/components/voice-text.js","view/components/info-box.js","view/components/traits.js","view/components/alignment.js","utils/pdf.js","view/components/character-sheet.js","view/screens/character.js","genfuncs/get-likes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","listRand","listname","Math","floor","random","length","getRace","races","common","rare","randomDraw","list","amount","notThere","result","draw","find","value","i","push","sameJoinLetters","partOne","partTwo","joiner","a","b","substring","join","genFirstName","gender","name","namesInfo","start","concat","Object","toConsumableArray","getNameEnd","getElfName","nameMeaningParts","keys","sindarin","console","log","sortedNameParts","sort","sortNameElements","translatedNameParts","map","arguments","undefined","chars","string","reduce","finalString","index","includes","newString","limitJoin","orderInfo","getName","race","first","last","fullName","getGender","genderScore","roll","fourrolls","parseInt","ceil","findlowest","indexOf","min","apply","splice","total","_i","_fourrolls","rollStats","statList","all","stat","applyAgeToStats","stats","age","newStats","_","statValue","statKey","ageChanges","getClassFromStats","charClass","orderedStats","getOrderedStats","highCon","Constitution","Strength","getClassFromStat","classOptions","jobOptions","noSkillJob","none","firstClass","getClassStat","secondClass","thirdClass","getClass","foresighted","Wisdom","adjustedStats","goodEvil","lawChaos","virtues","animalPlurals","animals","livingAreas","leaders","allRaces","raceInfo","elfVariants","dwarfVariants","halflingVariants","gnomeVariants","getAlignment","goodAxis","lawAxis","full","getValues","alignment","valuesList","values","other","slice","getPossibleValuesList","valueGoals","a quiet life","money","social influence","magical power","family","friendship","skill","knowledge","romance","belonging","possessions","homeland","hometown","art","music","food","fitting in","nature","innovation","battle","a challenge","quick wits","a good friend","a partner","religion","the gods","the spirits","wisdom","intelligence","speed","strength","hard work","resilience","charm","other people's hard work","talent","good humour","a good story","victory","sport","hunting","poetry","a collection","my own life","hotties","sentient life","opportunity","way of life","safety","beauty","daughters","sons","children","pets","dominance","humility","virtue","manliness","chastity","patience","determination","revenge","passion","bravery","sleep","destruction","getGoals","possibleGoals","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","getTraits","_ref","_ref$Intelligence","Intelligence","scores","traitOptions","dimension","score","anyUnlikely","getDimensionScores","traitsList","traits","flattenedScore","round","newTrait","defineProperty","objectSpread","capitalise","toUpperCase","titleCase","split","vocabulary","elegant","firstAnswer","secondAnswer","interjection","considering","certain","address","yes","no","elegant2","crotchety","joyful","terse","silly","longWinded","gloomy","southern","informal","intellectual","sly","reluctantProtag","oldGay","contrary","practical","pompous","grizzled","rude","optional","academic","frustrated","flirty","busy","jiira","loud","russian","traitVoiceMap","agreeableness","neuroticism","extroversion","openness","conscientiousness","getVocab","vocabName","vocab","requirements","meetsRequirements","trait","wordDescription","List","_this$props","this","props","className","items","itemClass","react_default","createElement","item","Component","Box","wrap","Brackets","box","Description","classes","descriptors","descriptor","Fragment","brackets","components_list","StatList","VoiceText","InfoBox","Traits","get","times","Alignment","acronym","getPDF","reader","FileReader","onloadend","fetch","charSheetFile","then","r","blob","blop","readAsArrayBuffer","Character","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","likes","dislikes","goals","makeCharacter","bind","assertThisInitialized","handleClick","window","scrollTo","multiplier","initialAge","getAge","_getClass","_getLikes","likesList","likesInfo","getLikes","setState","encodeURIComponent","JSON","stringify","_this$state","description","stat_list","components_alignment","voice_text","info_box","components_traits","onClick","href","getJson","download","App","character","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"67dAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+LCAzB,SAASC,EAASC,GAC/B,OAAOA,EAASC,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,oBCOvCC,MALf,WAEE,OAAOJ,KAAKE,SAAW,GAAMJ,EAASO,EAAMC,QAAUR,EAASO,EAAME,6BCiBxDC,MApBf,SAAoBC,EAAMC,GAIxB,SAASC,EAASC,EAAQC,GACxB,OAAQD,EAAOE,KAAK,SAAAC,GAAK,OAAIA,IAAUF,IAKzC,IAFA,IAAID,EAAS,GAEJI,EAAI,EAAGJ,EAAOT,OAASO,EAAQM,IAAK,CAC3C,IAAIH,EAAOf,EAASW,GAChBE,EAASC,EAAQC,IACnBD,EAAOK,KAAKJ,GAIhB,OAAOD,GCVT,IAAMM,EAAkB,SAACC,EAASC,GAAV,OACtBD,EAAQA,EAAQhB,OAAS,KAAOiB,EAAQ,IAOpCC,EAAS,SAACC,EAAGC,GAIjB,OAHIL,EAAgBI,EAAGC,KACrBA,EAAIA,EAAEC,UAAU,IAEX,CAACF,EAAGC,GAAGE,KAAK,KAGfC,EAAe,SAAAC,GACnB,IAAMC,EAAO,GAOb,OANAA,EAAK,GAAK9B,EAAS+B,EAAUC,OAC7BF,EAAK,GAfY,SAAAD,GAAM,OAEnB7B,EADJ6B,EACaE,EAAUF,GACX,GAAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAKH,EAAS,QAAdG,OAAAC,EAAA,EAAAD,CAA6BH,EAAS,QAYxCK,CAAWP,GAEjBT,EAAgBU,EAAK,GAAIA,EAAK,MAChCA,EAAK,GAAKA,EAAK,GAAGJ,UAAU,IAEvBH,EAAOO,EAAK,GAAIA,EAAK,KAGxBO,EAAa,SAAAhC,GACjB,IAAMiC,EAAmB5B,EAAWwB,OAAOK,KAAKR,EAAUS,UAAW,GACrEC,QAAQC,IAAIJ,GACZ,IAAMK,EAAkBL,EAAiBM,KAAKC,GAC9CJ,QAAQC,IAAIC,GACZ,IAAMG,EAAsBH,EAAgBI,IAC1C,SAAA9B,GAAK,OAAIc,EAAUS,SAASvB,KAG9B,OADAwB,QAAQC,IAAII,GC3CC,WAIb,IAHAnC,EAGAqC,UAAA3C,OAAA,QAAA4C,IAAAD,UAAA,GAAAA,UAAA,GAHO,GACPE,EAEAF,UAAA3C,OAAA,QAAA4C,IAAAD,UAAA,GAAAA,UAAA,GAFQ,IACRzB,EACAyB,UAAA3C,OAAA,QAAA4C,IAAAD,UAAA,GAAAA,UAAA,GADS,SAACxB,EAAGC,GAAJ,MAAU,CAACD,EAAGC,GAAGE,KAAK,OAEzBwB,EAASxC,EAAKyC,OAAO,SAACC,EAAapC,EAAOqC,GAC9C,GAAID,EAAYE,SAAS,OACvB,OAAOF,EAET,IAAMG,EAAYjC,EAAO8B,EAAapC,GACtC,OAAIuC,EAAUnD,OAAS6C,EACdG,EAAc,MAEhBG,IAET,OAAOL,EAAOI,SAAS,OACnBJ,EAAOzB,UAAU,EAAGyB,EAAO9C,OAAS,GACpC8C,ED2BGM,CAAUX,EAAqBzC,EAAQkB,IAG1CsB,EAAmB,SAACrB,EAAGC,GAAJ,OAAWiC,EAAUlC,GAAKkC,EAAUjC,GAAK,GAAK,GAgBxDkC,MAdf,SAAiB9B,EAAQ+B,GACvB,IAAMC,EAAQjC,EAAaC,GACrBiC,EACK,QAATF,EACIvB,EAAW,IACX3B,EAAWqB,EAAU+B,KAAM,GACxBlB,KAAKC,GACLlB,KAAK,IAId,MAAO,CAAEoC,SAAQ,GAAA9B,OAAK4B,EAAL,KAAA5B,OAAc6B,GAAQD,QAAOC,SEvDjCE,EALG,WAChB,IAAMC,EAAc/D,KAAKE,SACzB,OAAO6D,EAAc,GAAM,SAAWA,EAAc,GAAM,OAAS,YCoBtDC,MApBf,WAGE,IAFA,IAAIC,EAAY,GAEPjD,EAAI,EAAGA,EAAI,EAAGA,IACrBiD,EAAUhD,KAAKiD,SAASlE,KAAKmE,KAAqB,EAAhBnE,KAAKE,YAGzC,IAAIkE,EAAaH,EAAUI,QAAQrE,KAAKsE,IAAIC,MAAM,KAAMN,IAExDA,EAAUO,OAAOJ,EAAY,GAI7B,IAFA,IAAIK,EAAQ,EAEZC,EAAA,EAAAC,EAAiBV,EAAjBS,EAAAC,EAAAxE,OAAAuE,IACED,GADWE,EAAAD,GAIb,OAAOD,GCPMG,MATf,WAME,OALiBC,EAAS3B,OAAO,SAAC4B,EAAKC,GAErC,OADAD,EAAIC,GAAQf,IACLc,GACN,6CCcE,IAAME,EAAkB,SAACC,EAAOC,GACrC3C,QAAQC,IAAI,cAAeyC,GAC3B,IAAME,EAAWC,IAAElC,OACjB+B,EACA,SAACH,EAAKO,EAAWC,GAEf,OADAR,EAAIQ,GAAWD,GAAaE,EAAWL,GAAKI,GACrCR,GAET,IAGF,OADAvC,QAAQC,IAAI,cAAe2C,GACpBA,GCRHK,EAAoB,SAAAP,GACxB,IAAIQ,EAAY,GACVC,EApBgB,SAAAT,GAAK,OAC3BjD,OAAOK,KAAK4C,GAAOvC,KAAK,SAACpB,EAAGC,GAAJ,OAAW0D,EAAM3D,GAAK2D,EAAM1D,GAAK,GAAK,IAmBzCoE,CAAgBV,GAC/BW,EAAUX,EAAMY,cAAgB,IAAMZ,EAAMa,SAAW,GAIvDC,EAAmB,SAAAhB,GACvB,GAAIE,EAAMF,IAAS,MAAQa,GAAoB,iBAATb,GACpC,OAAOjF,EAASkG,EAAajB,IACxB,GAAIE,EAAMF,GAAQ,GACvB,OAAOjF,EAASmG,EAAWlB,IAE3B,IAAMmB,EAAapG,EAASmG,EAAWE,MACvC,OAAQV,EAAUpC,SAAS6C,GAA2B,GAAbA,GAGvCE,EAAaL,EAtBA,SAACL,EAAcE,GAAf,OACnBA,GAA+B,iBAApBF,EAAa,GACpBA,EAAa,GACbA,EAAa,GAOAW,CAAaX,EAAcE,IAiB5C,GAJIQ,GACFX,EAAUxE,KAAKmF,GAGbpG,KAAKE,SAAW,GAAK,CACvB,IAQMoG,EAAcP,EANhBH,EACcF,EAAa,GAEbA,EAAa,IAI3BY,GACFb,EAAUxE,KAAKqF,GAGnB,GAAItG,KAAKE,SAAW,IAAM,CACxB,IAAMqG,EAAaR,EAAiBL,EAAa,IAC7Ca,GACFd,EAAUxE,KAAKsF,GAInB,OAAOd,GAeMe,MAZf,SAAkBvB,EAAOC,GACvB,IAAMuB,EAAcxB,EAAMyB,OAAS,GAC7BC,EAAgB3B,EAAgBC,EAAOC,GAE7C,MAAO,CACLO,UACID,EADOiB,EACWE,EACA1B,GACtB0B,kBC1EEC,EAAW,CAAC,OAAQ,OAAQ,WAC5BC,EAAW,CAAC,SAAU,UAAW,WAejCC,EAAU,CACd,aACA,WACA,aACA,aACA,mBACA,eACA,aACA,YAEIC,EAAgB,CACpB,OACA,YACA,UACA,UACA,OACA,WACA,SACA,UACA,SACA,OACA,QACA,UACA,YACA,cACA,OACA,gBACA,UACA,WACA,UACA,QACA,SACA,QACA,SACA,OACA,QAEIC,EAAU,CACd,MACA,WACA,SACA,SACA,MACA,UACA,QACA,SACA,QACA,MACA,MACA,SACA,WACA,aACA,MACA,eACA,SACA,UACA,SACA,OACA,OACA,OACA,QACA,MACA,OAEIC,EAAc,CAClB,OACA,OACA,SACA,UACA,WACA,SACA,OACA,UACA,SACA,SACA,WACA,SACA,UACA,SACA,QACA,SACA,UAEIC,EAAU,CACd,OACA,QACA,OACA,WACA,QACA,WACA,SACA,WACA,OAEIC,EAAQ,GAAApF,OAAAC,OAAAC,EAAA,EAAAD,CACToF,EAAS9G,QADA0B,OAAAC,EAAA,EAAAD,CAEToF,EAAS7G,MAFAyB,OAAAC,EAAA,EAAAD,CAGToF,EAASC,aAHArF,OAAAC,EAAA,EAAAD,CAIToF,EAASE,eAJAtF,OAAAC,EAAA,EAAAD,CAKToF,EAASG,kBALAvF,OAAAC,EAAA,EAAAD,CAMToF,EAASI,gBC/GCC,EANM,WACnB,IAAMC,EAAW5H,EAAS8G,GACpBe,EAAU7H,EAAS+G,GAEzB,MAAO,CAAEa,WAAUC,UAASC,KADfF,IAAaC,EAAU,eAAvB,GAAA5F,OAA2C4F,EAA3C,KAAA5F,OAAsD2F,yBCctDG,MAff,SAAmBC,GAYjB,OAAOtH,EAXuB,SAAAsH,GAC5B,IAAIC,EAAaC,EAAOC,MAAMC,MAAM,GAOpC,OANIF,EAAOF,EAAUH,WACnBI,EAAU,GAAAhG,OAAAC,OAAAC,EAAA,EAAAD,CAAO+F,GAAP/F,OAAAC,EAAA,EAAAD,CAAsBgG,EAAOF,EAAUH,YAE/CK,EAAOF,EAAUJ,YACnBK,EAAU,GAAAhG,OAAAC,OAAAC,EAAA,EAAAD,CAAO+F,GAAP/F,OAAAC,EAAA,EAAAD,CAAsBgG,EAAOF,EAAUJ,aAE5CK,EAGSI,CAAsBL,GAAY,ICNzCM,EAAa,CACxBC,eAAgB,CACd,qBACA,sCACA,gCACA,sCACA,wBACA,mCAEFC,MAAO,CACL,0BACA,gDACA,mBACA,gBACA,+BACA,+BACA,2CACA,4BACA,qBACA,0BACA,oBAEFC,mBAAoB,2BAAAxG,OACQjC,EAASoH,IACnC,sCACA,uBACA,8BACA,iBALkB,gBAAAnF,OAMFjC,EAASoH,IACzB,wCACA,2BACA,kEAEFsB,gBAAiB,CACf,8BACA,oBACA,mDACA,iCACA,kBACA,yCACA,qCACA,kCACA,8FAEFC,OAAQ,CACN,sBACA,uBACA,sCACA,yBACA,sCACA,kCACA,0BACA,uCACA,2CACA,8CAEFC,WAAY,CACV,sCACA,yCACA,2BAEFC,MAAO,CAAC,sBAAuB,+BAC/BC,UAAW,CACT,sCACA,sCACA,qDACA,sDACA,oCACA,oBACA,wBACA,8EACA,wEACA,oCAEFC,QAAS,CACP,mBACA,oBACA,uBACA,2DACA,iDACA,2BAEFC,UAAW,CACT,6BACA,0CACA,iCAEFC,YAAa,CACX,kBACA,kCACA,mDACA,kCAEFC,SAAU,CACR,kCACA,4CACA,4CACA,qDACA,oDACA,4DACA,wDACA,6DACA,2EACA,sCACA,kCACA,2CACA,kDAEFC,SAAU,CACR,+BACA,yBACA,sCAEFC,IAAK,CACH,iCACA,kCACA,8BAEFC,MAAO,CACL,iCACA,4BACA,+BACA,2CAEFC,KAAM,CACJ,uBACA,kCACA,4BACA,iCACA,4CAEFC,aAAc,CACZ,mDACA,+EACA,0CACA,qBACA,qBACA,kCACA,mDAEFC,OAAQ,CACN,8DACA,2CAEFC,WAAY,6BAA8B,yBAC1CC,OAAQ,CACN,6BACA,qCACA,yBACA,2BAEFC,cAAe,CAAC,uBAChBC,aAAc,CACZ,wDACA,sDACA,2CAEFC,gBAAiB,CACf,qCACA,uBACA,kCACA,2BAEFC,YAAa,CACX,4BACA,qBACA,wBACA,iDACA,oDAEFC,SAAU,CACR,+CACA,kCACA,kDACA,gDACA,uCACA,oCACA,yBACA,2BACA,mDAEFC,WAAY,CACV,+CACA,kCACA,kDACA,gDACA,uCACA,oCACA,yBACA,2BACA,mDAEFC,cAAe,CACb,mCACA,6BACA,0CACA,wCACA,wBACA,wDAEFC,OAAQ,CACN,2BACA,gDACA,mCACA,oCACA,0BAEFC,aAAc,CACZ,uCACA,kDACA,4FACA,uEAEFC,MAAO,CACL,+DACA,yBACA,4BACA,8CACA,0CAEFC,SAAU,CACR,sDADQ,kBAAApI,OAEUjC,EAASmH,IAC3B,uCACA,6CACA,sDAEFmD,YAAa,CACX,mCACA,6CACA,kDAEFC,WAAY,CACV,+CACA,mFACA,2CAEFC,MAAO,CACL,4CACA,sCACA,uDACA,0DAEFC,2BAA4B,CAC1B,gEACA,8BACA,yDAEFC,OAAQ,CACN,yFACA,8EACA,yDACA,+BACA,oCACA,uCACA,qCAEFC,cAAe,CACb,wDACA,oBACA,6CACA,kCAEFC,eAAgB,CACd,2DACA,2CACA,2CACA,uEACA,mCAEFC,QAAS,CACP,gEACA,oFACA,gCAEFC,MAAO,CACL,oIAEFC,QAAS,CACP,iCADO,UAAA9I,OAEGjC,EAASkH,IACnB,kEACA,8CACA,6CACA,4CACA,8CACA,wBARO,WAAAjF,OASIjC,EAASkH,GATb,aAWT8D,OAAQ,CACN,yBACA,qFACA,gCACA,+CACA,6BAEFC,eAAgB,CACd,yBACA,8CAEFC,cAAe,CACb,oDACA,wFACA,2BAEFC,QAAS,CACP,oCACA,0EACA,8FACA,yBAEFjE,QAAS,CACP,kCACA,oEAFO,gCAAAjF,OAGyBjC,EAASiH,IAHlC,2BAAAhF,OAIoBjC,EAASkH,KAEtCkE,gBAAiB,CACf,uQAEFC,YAAa,CACX,iGAEFC,cAAe,CACb,6IACA,qDAEFC,OAAQ,CACN,sCACA,0CACA,wDAGFC,OAAQ,CACN,sCACA,iCACA,sCACA,mDACA,kDACA,mDACA,sDAEFC,UAAW,CACT,sBACA,0BACA,mBACA,8CACA,+BACA,6CAEFC,KAAM,CACJ,iBACA,qBACA,cACA,2CACA,0BACA,wCAEFC,SAAU,CACR,sBACA,0BACA,mBACA,0DACA,+BACA,6CAEFC,KAAM,CACJ,gBACA,oBAFI,aAAA3J,OAGSjC,EAASkH,IAHlB,gBAAAjF,OAIYjC,EAASkH,KAE3B2E,UAAW,kBAAA5J,OACQjC,EAASmH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","file":"static/js/main.f46b2726.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/character_sheet.1dcf7793.pdf\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default function listRand(listname) {\n  return listname[Math.floor(Math.random() * listname.length)];\n}\n","import listRand from \"../utils/list-random\";\nimport races from \"../datasets/races.json\";\n\nfunction getRace() {\n  //TODO implement racial variants.\n  return Math.random() < 0.8 ? listRand(races.common) : listRand(races.rare);\n}\n\nexport default getRace;\n","import listRand from \"./list-random\";\n\nfunction randomDraw(list, amount) {\n  // I'm avoiding nesting arrow functions here because I find it hard to read\n  // Kyle will definitely have an opinion about this.\n\n  function notThere(result, draw) {\n    return !result.find(value => value === draw);\n  }\n\n  let result = [];\n\n  for (let i = 0; result.length < amount; i++) {\n    let draw = listRand(list);\n    if (notThere(result, draw)) {\n      result.push(draw);\n    }\n  }\n\n  return result;\n}\n\nexport default randomDraw;\n","import namesInfo from \"../datasets/names.json\";\nimport orderInfo from \"../datasets/word-order.json\";\nimport listRand from \"../utils/list-random\";\nimport randomDraw from \"../utils/random-draw\";\nimport limitJoin from \"../utils/limit-list-join\";\n\n//const namesInfo = JSON.parse(namesInfoInfo);\n//const orderInfo = JSON.parse(wordOrder);\n\nconst sameJoinLetters = (partOne, partTwo) =>\n  partOne[partOne.length - 1] === partTwo[0];\n\nconst getNameEnd = gender =>\n  gender\n    ? listRand(namesInfo[gender])\n    : listRand([...namesInfo[\"female\"], ...namesInfo[\"male\"]]);\n\nconst joiner = (a, b) => {\n  if (sameJoinLetters(a, b)) {\n    b = b.substring(1);\n  }\n  return [a, b].join(\"\");\n};\n\nconst genFirstName = gender => {\n  const name = [];\n  name[0] = listRand(namesInfo.start);\n  name[1] = getNameEnd(gender);\n\n  if (sameJoinLetters(name[0], name[1])) {\n    name[1] = name[1].substring(1);\n  }\n  return joiner(name[0], name[1]);\n};\n\nconst getElfName = length => {\n  const nameMeaningParts = randomDraw(Object.keys(namesInfo.sindarin), 2);\n  console.log(nameMeaningParts);\n  const sortedNameParts = nameMeaningParts.sort(sortNameElements);\n  console.log(sortedNameParts);\n  const translatedNameParts = sortedNameParts.map(\n    value => namesInfo.sindarin[value]\n  );\n  console.log(translatedNameParts);\n  return limitJoin(translatedNameParts, length, joiner);\n};\n\nconst sortNameElements = (a, b) => (orderInfo[a] > orderInfo[b] ? 1 : -1);\n\nfunction getName(gender, race) {\n  const first = genFirstName(gender);\n  const last =\n    race === \"elf\"\n      ? getElfName(13)\n      : randomDraw(namesInfo.last, 2)\n          .sort(sortNameElements)\n          .join(\"\");\n  // character.firstName = first;\n  // character.lastName = last;\n\n  return { fullName: `${first} ${last}`, first, last };\n}\n\nexport default getName;\n","export default function limitListJoinByCharLength(\n  list = [],\n  chars = 100,\n  joiner = (a, b) => [a, b].join(\", \")\n) {\n  const string = list.reduce((finalString, value, index) => {\n    if (finalString.includes(\"...\")) {\n      return finalString;\n    }\n    const newString = joiner(finalString, value);\n    if (newString.length > chars) {\n      return finalString + \"...\";\n    }\n    return newString;\n  });\n  return string.includes(\"...\")\n    ? string.substring(0, string.length - 3)\n    : string;\n}\n","const getGender = () => {\n  const genderScore = Math.random();\n  return genderScore < 0.4 ? \"female\" : genderScore > 0.6 ? \"male\" : \"\";\n};\n\nexport default getGender;\n","// TODO add true randomness to this one.\n\nfunction roll() {\n  var fourrolls = [];\n\n  for (let i = 0; i < 4; i++) {\n    fourrolls.push(parseInt(Math.ceil(Math.random() * 6)));\n  }\n\n  var findlowest = fourrolls.indexOf(Math.min.apply(null, fourrolls));\n\n  fourrolls.splice(findlowest, 1);\n\n  var total = 0;\n\n  for (let each of fourrolls) {\n    total += each;\n  }\n\n  return total;\n}\n\nexport default roll;\n","import statList from \"../datasets/stats\";\nimport roll from \"../utils/roll\";\n\nfunction rollStats() {\n  const allstats = statList.reduce((all, stat) => {\n    all[stat] = roll();\n    return all;\n  }, {});\n\n  return allstats;\n}\n\nexport default rollStats;\n","import ageChanges from \"../datasets/age-changes.json\";\nimport _ from \"lodash\";\n\nexport default function getAge(multiplier) {\n  const initialAge = Math.floor(Math.random() * 80);\n  const age =\n    initialAge > 60 ? Math.floor(Math.random() * 80) + 15 : initialAge + 15;\n\n  const getAgeDescriptor = () => {\n    if (age < 30) {\n      return \"young\";\n    } else if (age >= 30 && age < 45) {\n      return \"middle-aged\";\n    } else if (age >= 45 && age <= 70) {\n      return \"aging\";\n    }\n    return \"old\";\n  };\n  return { descriptor: getAgeDescriptor(), age: age * multiplier };\n}\n\nexport const applyAgeToStats = (stats, age) => {\n  console.log(\"statsbefoer\", stats);\n  const newStats = _.reduce(\n    stats,\n    (all, statValue, statKey) => {\n      all[statKey] = statValue += ageChanges[age][statKey];\n      return all;\n    },\n    {}\n  );\n  console.log(\"stats after\", newStats);\n  return newStats;\n};\n","import statNames from \"../datasets/stats.json\";\nimport classOptions from \"../datasets/class-options.json\";\nimport jobOptions from \"../datasets/jobs.json\";\nimport listRand from \"../utils/list-random\";\nimport { applyAgeToStats } from \"./get-age\";\n\nconst getOrderedStats = stats =>\n  Object.keys(stats).sort((a, b) => (stats[a] < stats[b] ? 1 : -1));\n\n// will probably need to pass down a callback to set the stats.\n// I would make that state except then everything would update itself on changes\n// better to use redux, if I wanted to implement it\n// which I don't, sigh. I guess I'll go with the 'everything rerenders' thing for now...\n// context is actually probably sufficient.\n// Oooor react hooks! that could be good, passing down a piece of state\n// - except I want the data to stay as an object in one spot... but to have parts trigger rerenders lower down.\n// needs more thinky.\n\n//logic is weird here. people keep getting wisdom classes with 14 wisdom etc.\nconst getClassStat = (orderedStats, highCon) =>\n  highCon && orderedStats[0] === \"Constitution\"\n    ? orderedStats[1]\n    : orderedStats[0];\n\nconst getClassFromStats = stats => {\n  let charClass = [];\n  const orderedStats = getOrderedStats(stats);\n  const highCon = stats.Constitution >= 15 && stats.Strength < 14;\n\n  const bestStat = getClassStat(orderedStats, highCon);\n\n  const getClassFromStat = stat => {\n    if (stats[stat] >= 15 && !(highCon && stat === \"Constitution\")) {\n      return listRand(classOptions[stat]);\n    } else if (stats[stat] > 12) {\n      return listRand(jobOptions[stat]);\n    } else {\n      const noSkillJob = listRand(jobOptions.none);\n      return !charClass.includes(noSkillJob) ? noSkillJob : \"\";\n    }\n  };\n  const firstClass = getClassFromStat(bestStat);\n  if (firstClass) {\n    charClass.push(firstClass);\n  }\n\n  if (Math.random() < 0.3) {\n    let secondJobStat = \"\";\n\n    if (highCon) {\n      secondJobStat = orderedStats[0];\n    } else {\n      secondJobStat = orderedStats[1];\n    }\n\n    const secondClass = getClassFromStat(secondJobStat);\n    if (secondClass) {\n      charClass.push(secondClass);\n    }\n  }\n  if (Math.random() < 0.07) {\n    const thirdClass = getClassFromStat(orderedStats[2]);\n    if (thirdClass) {\n      charClass.push(thirdClass);\n    }\n  }\n\n  return charClass;\n};\n\nfunction getClass(stats, age) {\n  const foresighted = stats.Wisdom > 11;\n  const adjustedStats = applyAgeToStats(stats, age);\n\n  return {\n    charClass: foresighted\n      ? getClassFromStats(adjustedStats)\n      : getClassFromStats(stats),\n    adjustedStats\n  };\n}\n\nexport default getClass;\n","import raceInfo from \"./races.json\";\n\n//const raceInfo = JSON.parse(races);\n\nconst goodEvil = [\"good\", \"evil\", \"neutral\"];\nconst lawChaos = [\"lawful\", \"neutral\", \"chaotic\"];\nconst times = [\n  \" when put under pressure\",\n  \" when bored\",\n  \" infrequently\",\n  \" deep inside\",\n  \" when not feeling threatened\",\n  \" on special occasions\",\n  \" on the surface\",\n  \" when with certain others\",\n  \" with new people\",\n  \" when left alone\",\n  \" when tired\"\n];\n\nconst virtues = [\n  \"temperance\",\n  \"chastity\",\n  \"generosity\",\n  \"compassion\",\n  \"civic-mindedness\",\n  \"selflessness\",\n  \"timeliness\",\n  \"patience\"\n];\nconst animalPlurals = [\n  \"ants\",\n  \"elephants\",\n  \"ferrets\",\n  \"rabbits\",\n  \"bats\",\n  \"hamsters\",\n  \"snakes\",\n  \"turtles\",\n  \"ravens\",\n  \"owls\",\n  \"flies\",\n  \"lizards\",\n  \"hedgehogs\",\n  \"chinchillas\",\n  \"rats\",\n  \"stick insects\",\n  \"spiders\",\n  \"chickens\",\n  \"dragons\",\n  \"lions\",\n  \"wolves\",\n  \"bears\",\n  \"tigers\",\n  \"cats\",\n  \"dogs\"\n];\nconst animals = [\n  \"ant\",\n  \"elephant\",\n  \"ferret\",\n  \"rabbit\",\n  \"bat\",\n  \"hamster\",\n  \"snake\",\n  \"turtle\",\n  \"raven\",\n  \"owl\",\n  \"fly\",\n  \"lizard\",\n  \"hedgehog\",\n  \"chinchilla\",\n  \"rat\",\n  \"stick insect\",\n  \"spider\",\n  \"chicken\",\n  \"dragon\",\n  \"lion\",\n  \"wolf\",\n  \"bear\",\n  \"tiger\",\n  \"cat\",\n  \"dog\"\n];\nconst livingAreas = [\n  \"city\",\n  \"town\",\n  \"forest\",\n  \"country\",\n  \"conclave\",\n  \"temple\",\n  \"farm\",\n  \"dungeon\",\n  \"palace\",\n  \"desert\",\n  \"mountain\",\n  \"plains\",\n  \"village\",\n  \"county\",\n  \"swamp\",\n  \"jungle\",\n  \"savana\"\n];\nconst leaders = [\n  \"king\",\n  \"queen\",\n  \"duke\",\n  \"governor\",\n  \"mayor\",\n  \"headsman\",\n  \"prince\",\n  \"princess\",\n  \"god\"\n];\nconst allRaces = [\n  ...raceInfo.common,\n  ...raceInfo.rare,\n  ...raceInfo.elfVariants,\n  ...raceInfo.dwarfVariants,\n  ...raceInfo.halflingVariants,\n  ...raceInfo.gnomeVariants\n];\nconst peopleTypes = [\n  \"short people\",\n  \"cool people\",\n  \"tall people\",\n  \"doctors\",\n  \"stupid people\",\n  \"happy people\",\n  \"sad people\",\n  \"foreigners\"\n];\n\nexport {\n  goodEvil,\n  lawChaos,\n  animals,\n  livingAreas,\n  leaders,\n  allRaces,\n  times,\n  virtues,\n  animalPlurals,\n  peopleTypes\n};\n","import { goodEvil, lawChaos } from \"../datasets/short-sets\";\nimport listRand from \"../utils/list-random\";\n\nconst getAlignment = () => {\n  const goodAxis = listRand(goodEvil);\n  const lawAxis = listRand(lawChaos);\n  const full = goodAxis === lawAxis ? \"true neutral\" : `${lawAxis} ${goodAxis}`;\n  return { goodAxis, lawAxis, full };\n};\nexport default getAlignment;\n","import randomDraw from \"../utils/random-draw\";\nimport values from \"../datasets/values.json\";\n\n//const values = JSON.parse(valuesInfo);\n\nfunction getValues(alignment) {\n  const getPossibleValuesList = alignment => {\n    let valuesList = values.other.slice(0);\n    if (values[alignment.lawAxis]) {\n      valuesList = [...valuesList, ...values[alignment.lawAxis]];\n    }\n    if (values[alignment.goodAxis]) {\n      valuesList = [...valuesList, ...values[alignment.goodAxis]];\n    }\n    return valuesList;\n  };\n\n  return randomDraw(getPossibleValuesList(alignment), 2);\n}\n\nexport default getValues;\n","import listRand from \"../utils/list-random\";\nimport {\n  animals,\n  leaders,\n  livingAreas,\n  allRaces,\n  virtues,\n  animalPlurals,\n  peopleTypes\n} from \"./short-sets\";\n\nexport const valueGoals = {\n  \"a quiet life\": [\n    \"to escape violence\",\n    \"to find someone to settle down with\",\n    \"to find something to focus on\",\n    \"to escape from other people's plans\",\n    \"to find time to relax\",\n    \"to buy a cottage in the country\"\n  ],\n  money: [\n    \"to gather a great hoard\",\n    \"to buy the freedom of someone important to me\",\n    \"to buy influence\",\n    \"to buy safety\",\n    \"to be richer than my friends\",\n    \"to be richer than my enemies\",\n    \"to have everything I want when I want it\",\n    \"to be able to be generous\",\n    \"to feel worthwhile\",\n    \"to save my poor friends\",\n    \"to pay a penance\"\n  ],\n  \"social influence\": [\n    `to gain the ear of the ${listRand(leaders)}`,\n    \"to champion my cause among the rich\",\n    \"to manipulate others\",\n    \"to get the better of others\",\n    \"to scam others\",\n    `to marry the ${listRand(leaders)}`,\n    \"to improve the low status of my house\",\n    \"to improve my low status\",\n    \"to improve my lower-class accent so I can move in high society\"\n  ],\n  \"magical power\": [\n    \"to make myself utterly safe\",\n    \"to control others\",\n    \"to discover something that can control the world\",\n    \"to be able to destroy anything\",\n    \"to take revenge\",\n    \"to create something amazing with magic\",\n    \"to make a monument to my greatness\",\n    \"to discover something truly new\",\n    \"I have an ancient text that holds terrible secrets that must not fall into the wrong hands\"\n  ],\n  family: [\n    \"to rescue my sister\",\n    \"to rescue my brother\",\n    \"to make my father proud in his area\",\n    \"to make my mother rich\",\n    \"to start a family with someone nice\",\n    \"to protect my uncle's interests\",\n    \"to hide a family secret\",\n    \"to help my cousins cover up a murder\",\n    \"to protect my grandparents from violence\",\n    \"to help my brother's family out of poverty\"\n  ],\n  friendship: [\n    \"to make as many friends as possible\",\n    \"to help my friends achieve their goals\",\n    \"to keep my friends safe\"\n  ],\n  skill: [\"to gain a new skill\", \"to be the best at what I do\"],\n  knowledge: [\n    \"to learn everything about one thing\",\n    \"to learn something about everything\",\n    \"to discover something new (in my area of interest)\",\n    \"to discover something really new (in whatever area)\",\n    \"to teach people about what I love\",\n    \"to find a teacher\",\n    \"to find out the truth\",\n    \"to complete my life's work - a series of tomes on a specific field of study\",\n    \"I sold my soul for knowledge - I must win it back through great deeds\",\n    \"to find out who killed my friend\"\n  ],\n  romance: [\n    \"to find Mr Right\",\n    \"to find Mrs Right\",\n    \"to find my true love\",\n    \"to do everything I can to make my partner feel cared for\",\n    \"to be a model of chivalry for others to follow\",\n    \"to find prince charming\"\n  ],\n  belonging: [\n    \"to find somewhere I belong\",\n    \"to find people who love me for who I am\",\n    \"to become someone who fits in\"\n  ],\n  possessions: [\n    \"to own a castle\",\n    \"to own something very expensive\",\n    \"to keep my current possessions from being stolen\",\n    \"to get something for my family\"\n  ],\n  homeland: [\n    \"to fight to protect my homeland\",\n    \"to make my homeland somewhere truly great\",\n    \"to rid my homeland of the evils inside it\",\n    \"to protect the people of my homeland from monsters\",\n    \"to protect the people of my homeland from bandits\",\n    \"to protect the people of my homeland from its evil nobles\",\n    \"to protect the people of my homeland from persecution\",\n    \"to conquer the adjacent country in the name of my homeland\",\n    \"to seek out useful information to use against the enemies of my homeland\",\n    \"to track down a political dissident\",\n    \"to provide arms for a rebellion\",\n    \"to understand the needs of the commoners\",\n    \"to learn all the languages spoken in this land\"\n  ],\n  hometown: [\n    \"Can't I finally return home?\",\n    \"to improve my hometown\",\n    \"to find somewhere like my hometown\"\n  ],\n  art: [\n    \"to create a great piece of art\",\n    \"to collect a great piece of art\",\n    \"to discover a great artist\"\n  ],\n  music: [\n    \"to play a great piece of music\",\n    \"to hear the best musician\",\n    \"to discover a great musician\",\n    \"to play music in a prestigious location\"\n  ],\n  food: [\n    \"to create a new dish\",\n    \"to eat the food of all cultures\",\n    \"to discover a new flavour\",\n    \"to eat the most expensive food\",\n    \"to become the apprentice to a great chef\"\n  ],\n  \"fitting in\": [\n    \"to hide my strange qualities and stop the stares\",\n    \"to disguise myself well enough that even my close friends won't recognise me\",\n    \"to do exactly what my friends are doing\",\n    \"to find acceptance\",\n    \"to be able to hide\",\n    \"to receive my mother's approval\",\n    \"to keep myself safe by not attracting attention\"\n  ],\n  nature: [\n    \"to save a forest from the predations of loggers and hunters\",\n    \"to see all the greatest natural wonders\"\n  ],\n  innovation: [`to discover something new`, \"to gather a thinktank\"],\n  battle: [\n    \"to fight the strongest guy\",\n    \"to find a cause worth fighting for\",\n    \"to smash some heads in\",\n    \"to smite a serious evil\"\n  ],\n  \"a challenge\": [\"to find a challenge\"],\n  \"quick wits\": [\n    \"to seriously tear someone down with a well-timed jibe\",\n    \"to act entirely spontaneously but still come out ok\",\n    \"to find someone who can keep up with me\"\n  ],\n  \"a good friend\": [\n    \"to help my friend with their goals\",\n    \"to protect my friend\",\n    \"to help my friend hide a murder\",\n    \"to prove I can be loyal\"\n  ],\n  \"a partner\": [\n    \"to provide for my partner\",\n    \"to protect my wife\",\n    \"to protect my husband\",\n    \"to seek revenge on those who harmed my partner\",\n    \"to seek revenge on the one who killed my partner\"\n  ],\n  religion: [\n    \"to complete a pilgrimage to our holiest site\",\n    \"to sacrifice a child for my god\",\n    \"to sacrifice something very expensive to my god\",\n    \"to seek power in return for favours to my god\",\n    \"to worship my god through good deeds\",\n    \"to serve the priesthood of my god\",\n    \"to smite non-believers\",\n    \"to start my own religion\",\n    \"to convert more people to the worship of my god\"\n  ],\n  \"the gods\": [\n    \"to complete a pilgrimage to our holiest site\",\n    \"to sacrifice a child for my god\",\n    \"to sacrifice something very expensive to my god\",\n    \"to seek power in return for favours to my god\",\n    \"to worship my god through good deeds\",\n    \"to serve the priesthood of my god\",\n    \"to smite non-believers\",\n    \"to start my own religion\",\n    \"to convert more people to the worship of my god\"\n  ],\n  \"the spirits\": [\n    \"to seek favours from the spirits\",\n    \"to meet a spirit in person\",\n    \"to help the spirit gain more worshipers\",\n    \"to make a sacrifice for magical power\",\n    \"to join the wild hunt\",\n    \"to destroy the enemy spirits of the spirit I worship\"\n  ],\n  wisdom: [\n    \"to broaden my experience\",\n    \"to be the person everyone comes to for advice\",\n    \"to meditate for 1 hour every day\",\n    \"to treat hardship with equanimity\",\n    \"to reach enlightenment\"\n  ],\n  intelligence: [\n    \"to find a team of intelligent people\",\n    \"to be among stupid people so I can feel smarter\",\n    \"to solve one of the fundamental problems laid out by the Mage of Oil over 3 centuries ago\",\n    \"to understand in depth the mathematics that underlie physical magic\"\n  ],\n  speed: [\n    \"to repeat and practice until everything can be done at speed\",\n    \"to learn to speed-read\",\n    \"become the fastest runner\",\n    \"beat enemies in the shortest amount of time\",\n    \"to be fast enough as to be untouchable\"\n  ],\n  strength: [\n    \"to become strong enough to protect those dear to me\",\n    `to control the ${listRand(livingAreas)}`,\n    \"to protect the weak with my strength\",\n    \"to have the strength to destroy my enemies\",\n    \"to become strong enough that nobody can control me\"\n  ],\n  \"hard work\": [\n    \"to raise my kids as hard workers\",\n    \"to work for as long as I can hold my tools\",\n    \"to give everything i can to help those in need\"\n  ],\n  resilience: [\n    \"to toughen myself up through difficult tasks\",\n    \"to to toughen myself up by regularly fasting, with interval training and similar\",\n    \"to toughen others up with regular abuse\"\n  ],\n  charm: [\n    \"to literally charm the pants off somebody\",\n    \"to charm someone out of their money\",\n    \"to maintain a good relationship with everyone i meet\",\n    \"to hide the existence of my many wives from each other\"\n  ],\n  \"other people's hard work\": [\n    \"meet enough people I can rely on to take care of any problems\",\n    \"find someone to care for me\",\n    \"to hold out until other members of my family get here\"\n  ],\n  talent: [\n    \"test myself in a great range of activities to see if I can find a new talent in myself\",\n    \"I had great talent at a young age. I need to prove that's not just who I am\",\n    \"I know my talent - all that remains is to seek mastery\",\n    \"get out of doing shit things\",\n    \"find the talents of my associates\",\n    \"birth a talented child with a dragon\",\n    \"to find others with great talents\"\n  ],\n  \"good humour\": [\n    \"help people deal better with suffering through humour\",\n    \"mock death itself\",\n    \"get someone who's dying to laugh about it \",\n    \"to find my own happiness again\"\n  ],\n  \"a good story\": [\n    \"to have something happen to me that others find exciting\",\n    \"to make sense of what has happened to me\",\n    \"to learn the language of those around me\",\n    \"to be able to explain even mundane happenings in an entertaining way\",\n    \"to bring happiness to the dying\"\n  ],\n  victory: [\n    \"like a predator, I will take everything from any who cross me\",\n    \"I will break myself and my long term or short term good just to win a petty fight\",\n    \"to inspire others to succeed\"\n  ],\n  sport: [\n    \"to succeed in my country's sport is everything to my family. By adventuring I can improve my skills till I can reach that level.\"\n  ],\n  hunting: [\n    \"to kill something very elusive\",\n    `kill a ${listRand(animals)}`,\n    \"to improve my personal best in most animals taken down in a day\",\n    \"to train my dogs to follow my every command\",\n    \"to train a hawk to follow commands exactly\",\n    \"to tame a new animal and train it to hunt\",\n    \"to win the country-wide hunting competition\",\n    \"to join the wild hunt\",\n    `train a ${listRand(animals)} to hunt`\n  ],\n  poetry: [\n    \"to finish my epic poem\",\n    \"to write a poem that properly captures something that can't otherwise be explained\",\n    \"to discover a new poet master\",\n    \"to be apprenticed to the current poet master\",\n    \"to become the poet master\"\n  ],\n  \"a collection\": [\n    \"complete my collection\",\n    \"find a collection that isn't so horrifying\"\n  ],\n  \"my own life\": [\n    \"to stay alive despite all the swords at my throat\",\n    \"to protect myself and not give into the desire to value my own life less than others'\",\n    \"to discover immortality\"\n  ],\n  hotties: [\n    \"to bang someone really attractive\",\n    \"to become so attractive that others whistle when I walk down the street\",\n    \"to get together with someone so attractive that others whistle when we walk down the street\",\n    \"to see girls' panties\"\n  ],\n  animals: [\n    \"become an animal reserve warden\",\n    \"learn medicine and healing skills to take care of injured animals\",\n    `take out the hunters of rare ${listRand(animalPlurals)}`,\n    `learn the wisdom of the ${listRand(animals)}`\n  ],\n  \"sentient life\": [\n    \"become less distance oriented in my morality - some people might say that I should value my friends or my race or my children more than others, but I know that all sentient creatures are similarly worthwhile. I want to care equally for those I have never met.\"\n  ],\n  opportunity: [\n    \"finding opportunity is a matter of placing myself in as many different situations as possible\"\n  ],\n  \"way of life\": [\n    \"I am the last member of my culture. I must find someone to pass my history and language on to, or to spread the basics as far as possible.\",\n    \"reduce the influence of foreigners in my homeland\"\n  ],\n  safety: [\n    \"find a place hidden from my enemies\",\n    \"find a place hidden from my persecutors\",\n    \"become strong enough to keep those I care about safe\"\n  ],\n  // TODO - fix these ones below up\n  beauty: [\n    \"find an object of surpassing beauty\",\n    \"improve my personal aesthetics\",\n    \"make something incredibly beautiful\",\n    \"learn more about how to design beautiful gardens\",\n    \"learn more about how to design beautiful houses\",\n    \"learn more about how to design beautiful scrolls\",\n    \"learn more about how to design beautiful furniture\"\n  ],\n  daughters: [\n    \"protect my daughter\",\n    \"raise my daughter right\",\n    \"find my daughter\",\n    \"find the right man for my daughter to marry\",\n    \"take revenge for my daughter\",\n    \"convince my daughter to speak to me again\"\n  ],\n  sons: [\n    \"protect my son\",\n    \"raise my son right\",\n    \"find my son\",\n    \"find the right woman for my son to marry\",\n    \"take revenge for my son\",\n    \"convince my son to speak to me again\"\n  ],\n  children: [\n    \"protect my children\",\n    \"raise my children right\",\n    \"find my children\",\n    \"find a prestigious family for my children to marry into\",\n    \"take revenge for my children\",\n    \"convince my children to speak to me again\"\n  ],\n  pets: [\n    \"get more pets\",\n    \"keep my pets safe\",\n    `get a pet ${listRand(animals)}`,\n    `train my pet ${listRand(animals)}`\n  ],\n  dominance: [\n    `take over the ${listRand(livingAreas)}`,\n    `teach those in the ${listRand(livingAreas)} who is really in charge`,\n    `become a ${listRand(leaders)}`,\n    `defeat the ${listRand(livingAreas)}`,\n    \"intimidate my associates into doing as I say\"\n  ],\n  humility: [\n    \"to find the strength to accept my flaws\",\n    \"to practice living with nothing\"\n  ],\n  virtue: [\n    `to be an exemplar of ${listRand(virtues)}`,\n    `to teach all people of the virtue of ${listRand(virtues)}`\n  ],\n  manliness: [\n    \"to become extremely buff\",\n    \"to grow a huge mustache\",\n    \"to find someone who can teach me to be as manly as he is\"\n  ],\n  chastity: [\n    \"to keep my virginity until marriage\",\n    \"to atone for losing my virginity\",\n    \"to learn to repress my sexual urges\"\n  ],\n  patience: [\n    \"to learn to wait for the right moment to strike\",\n    \"I have previously been too hastily and lost something I loved. I have to be more cautious and patient\",\n    \"patience is the key to getting what I want. I must wait and not waste resources.\"\n  ],\n  determination: [],\n  revenge: [],\n  passion: [],\n  bravery: [],\n  sleep: [],\n  destruction: [\n    `destroy the ${listRand(livingAreas)}`,\n    `kill the ${listRand(leaders)}`,\n    `kill all ${listRand(animalPlurals)}`,\n    \"kill any who insult me\",\n    `kill all ${listRand(peopleTypes)}`\n  ],\n  race: [\n    \"destroy the misconception that any race is better than mine\",\n    `kill every ${listRand(allRaces)}`\n  ]\n};\n","import { valueGoals } from \"../datasets/valueGoals\";\nimport listRand from \"../utils/list-random\";\n\nfunction getGoals(values) {\n  let possibleGoals = [];\n\n  for (let value of values) {\n    if (valueGoals[value]) {\n      possibleGoals = [...possibleGoals, ...valueGoals[value]];\n    }\n  }\n  return listRand(possibleGoals);\n}\n\nexport default getGoals;\n","import traitOptions from \"../datasets/personality-traits.json\";\nimport listRand from \"../utils/list-random\";\n\nconst getDimensionScores = (lawAxis, Intelligence) => {\n  const personalityScores = Object.keys(traitOptions).reduce(\n    (scores, dimension) => {\n      const score = Math.random();\n\n      const organisedChaotic =\n        lawAxis === \"chaotic\" && dimension === \"conscientious\" && score > 0.75;\n      const messyLawful =\n        lawAxis === \"lawful\" && dimension === \"conscientious\" && score < 0.25;\n      const openLawful =\n        lawAxis === \"lawful\" && dimension === \"open\" && score > 0.75;\n      const restrictiveChaotic =\n        lawAxis === \"chaotic\" && dimension === \"open\" && score < 0.25;\n\n      const anyUnlikely =\n        organisedChaotic || messyLawful || openLawful || restrictiveChaotic;\n\n      scores[dimension] = anyUnlikely ? Math.random() : score;\n      if (dimension === \"openness\") {\n        console.log(\"before\", scores[dimension]);\n        scores[dimension] += (Intelligence - 10) / 20;\n        if (scores[dimension] > 1) {\n          scores[dimension] = 1;\n        }\n        console.log(\"after\", scores[dimension]);\n      }\n      return scores;\n    },\n    {}\n  );\n\n  return personalityScores;\n};\n\nconst getTraits = (lawAxis, { Intelligence = 10 }) => {\n  const scores = getDimensionScores(lawAxis, Intelligence);\n  const traitsList = Object.keys(scores).reduce((traits, dimension) => {\n    const flattenedScore = Math.round(scores[dimension]);\n    const newTrait = {\n      [dimension]: listRand(traitOptions[dimension])[flattenedScore]\n    };\n    return { ...traits, ...newTrait };\n  }, {});\n  return { traitsList, scores };\n};\n\nexport default getTraits;\n","const capitalise = string => {\n  if (string) {\n    return string === \"and\"\n      ? string\n      : string[0].toUpperCase() + string.substring(1);\n  }\n  return \"Nameless\";\n};\n\nfunction titleCase(string) {\n  return string\n    ? string\n        .split(\" \")\n        .map(capitalise)\n        .join(\" \")\n    : \"Nameless\";\n}\nexport { titleCase, capitalise };\n","import { capitalise } from \"../utils/caps-formatter\";\n\nconst vocabulary = {\n  elegant: {\n    firstAnswer: values =>\n      `Like any of my station should, I rate  ${\n        values[0]\n      } most highly, of course.`,\n    secondAnswer: values => `Second would be ${values[1]}`,\n    interjection:\n      \"Such a question is a little deeper than I would prefer to consider right now. However, knowing you, the answer will be important... \",\n    considering: \"I would think\",\n    certain: \"to be sure.\",\n    address: \"\",\n    yes: \"certainly\",\n    no: \"I'm afraid not\"\n  },\n  elegant2: {\n    firstAnswer: values => `most important is ${values[0]}, of course.`,\n    secondAnswer: values => `Second would be ${values[1]}`,\n    interjection: \"Why,\",\n    considering: \"I would think\",\n    certain: \"to be sure.\",\n    address: \"my dear friend,\",\n    yes: \"certainly\",\n    no: \"I'm afraid not\"\n  },\n  crotchety: {\n    firstAnswer: values =>\n      ` ${capitalise(\n        values[0]\n      )}. The most important thing. You can learn from that.`,\n    secondAnswer: values => `Secondly, yeah, ${values[1]}`,\n    interjection: \"Eugh \",\n    considering: \"I reckon\",\n    certain: \" o'course\",\n    address: \"ya stupid kid.\",\n    yes: \"yah 'spose\",\n    no: \"get outta here!\"\n  },\n  joyful: {\n    firstAnswer: values => `Most important is ${values[0]}.`,\n    secondAnswer: values => `Second to that is ${values[1]}`,\n    interjection: \"A wonderful question,\",\n    considering: \"perhaps?\",\n    certain: \" of course!\",\n    address: \"my friend.\",\n    yes: \"yes!\",\n    no: \"I hate to say it, but no!\"\n  },\n  terse: {\n    firstAnswer: values => `Firstly, ${values[0]}.`,\n    secondAnswer: values => `Second, ${values[1]}`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"clearly\",\n    address: \"\",\n    yes: \"yes\",\n    no: \"no\"\n  },\n  silly: {\n    firstAnswer: values => `Most important is ${values[0]}, right?`,\n    secondAnswer: values => `Second is ${values[1]}`,\n    interjection: \"Well \",\n    considering: \"I guess?\",\n    certain: \"fo sho.\",\n    address: \"friendo, \",\n    yes: \"yessir\",\n    no: \"no way!\"\n  },\n  longWinded: {\n    firstAnswer: values =>\n      `It's really quite difficult to know, since really, does anyone know themselves that well? But if I really had to pick an answer to what I value most highly, it would be ${\n        values[0]\n      }.`,\n    secondAnswer: values =>\n      `Second to most important is even harder, if you hadn't already thought about it, so if you'll just give me a moment - really, did you expect an answer from me immediately on asking this? You really think I'd just be able to spit this out? 'what are your first and second most valued things? Please answer right away!' Well I'm very sorry but we can't all just have those things floating at the top of our minds! Alright, I can see you're getting quite irritable, so I suppose I'll just tell you the first thing that comes to mind - ${\n        values[1]\n      }.`,\n    interjection: \"I'm so glad you asked me that.\",\n    considering: \"Again, I'm really not sure.\",\n    certain:\n      \" - that's quite obvious, isn't it? I'm pretty sure everyone feels that way at heart, don't you think?\",\n    address:\n      \"I know we've only met recently, but I can already tell we're going to get along very well.\",\n    yes: \"I can't really say anything but yes\",\n    no: \"I don't want to, but there's really no way I can agree with that.\"\n  },\n  gloomy: {\n    firstAnswer: values =>\n      `I haven't been sure recently but ... I think it's ${values[0]}.`,\n    secondAnswer: values => `And second is ... ${values[1]}.`,\n    interjection: \"Sigh. \",\n    considering: \"I ... guess, if you even care.\",\n    certain: \"That's what I think, if it even matters.\",\n    address: \"\",\n    yes: \"I suppose\",\n    no: \"are you trying to make my life worse?\"\n  },\n  southern: {\n    firstAnswer: values => `Most important is ${values[0]}.`,\n    secondAnswer: values => `Secondly'd have to be ${values[1]}`,\n    interjection: \"Waal - \",\n    considering: \"I s'pose!\",\n    certain: \"I'd reckon\",\n    address: \"frand\",\n    yes: \"yah\",\n    no: \"naw\"\n  },\n  informal: {\n    firstAnswer: values => `most important is ${values[0]}.`,\n    secondAnswer: values => `Second would be ${values[1]}`,\n    interjection: \"Huh. Well, \",\n    considering: \"I s'pose!\",\n    certain: \"you know\",\n    address: \"bud,\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n\n  intellectual: {\n    firstAnswer: values => `my main intrinsic value is ${values[0]}.`,\n    secondAnswer: values =>\n      ` Instrumental in attaining ${values[0]} is ${\n        values[1]\n      }. Hence, I would call that second most valued.`,\n    interjection: \"Since you ask,\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n\n  sly: {\n    firstAnswer: values =>\n      `This is what is most important in this world: ${\n        values[0]\n      }. Don't look at me like that, you're the one who asked.`,\n    secondAnswer: values =>\n      ` And secondly, this one's for free - the second most important thing is ${\n        values[1]\n      }`,\n    interjection:\n      \"Well, kid, since you actually think it's worth asking me, I suppose I'll give you a good answer.\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n\n  reluctantProtag: {\n    firstAnswer: values =>\n      `At the moment, with the current situation, I've gotta value ${\n        values[0]\n      } the most.`,\n    secondAnswer: values =>\n      `\"${capitalise(\n        values[1]\n      )}\" rivals that but I can't make it top of my list right now.`,\n    interjection:\n      \"Ok, uhhh, weird question but I guess I've thought about this a bit.\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n  oldGay: {\n    firstAnswer: values =>\n      `You gesture for them to go on - \"If you're sure you want to listen to this old degenerate - ${\n        values[0]\n      }. I've lived my life believing that's most important.`,\n    secondAnswer: values =>\n      `Another option that might suit you better is ${\n        values[1]\n      } -  I really feel that's more your thing, my dear`,\n    interjection:\n      'Why on earth are you asking that?\" - they give you a quizzical look - \"Are you feeling lost or something? You\\'d do better to ask a priest, you know\" - ',\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n  contrary: {\n    firstAnswer: values => `${capitalise(values[1])}.`,\n    secondAnswer: values => `Definitely not ${values[0]}`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n  practical: {\n    firstAnswer: values =>\n      `Throughout my life, I've found ${values[0]} to be most worthwhile.`,\n    secondAnswer: values =>\n      `Right now, I also think ${\n        values[1]\n      } is very important, but that's more a matter of how things are going down right now.`,\n    interjection: \"I s'pose I have time to discuss things. \",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n  pompous: {\n    firstAnswer: values => `Formost,  ${values[0]}, for its value in my life.`,\n    secondAnswer: values =>\n      `After that, ${values[1]}, for how it can help others.`,\n    interjection:\n      \"There are two things I consider most important in this world. Listen, and understand.\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n  grizzled: {\n    firstAnswer: values =>\n      ` If you're facing the unexpected, you'll always need ${values[0]} and ${\n        values[1]\n      }. Sure, some might be able to get by without one of them for a time, but if you pay attention you'll notice that almost every veteran of this business who's still alive has at least a little of both.`,\n    secondAnswer: values =>\n      ` ${capitalise(values[0])} and ${\n        values[1]\n      }, kid, they'll keep you alive.`,\n    interjection:\n      \"You're new, so you need to know this. Forgive me if you've heard it before.\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n  other: {\n    firstAnswer: values =>\n      `${capitalise(\n        values[0]\n      )}. This is of fundamental importance in my current endeavor.\"`,\n    secondAnswer: values =>\n      `They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${\n        values[1]\n      }, but that can wait`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n  rude: {\n    firstAnswer: values => \"Fuck off.\",\n    secondAnswer: values => \"\", //`They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${values[1]}, but that can wait`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\",\n    optional: values => `In fact, the true answer is ${values[0]}`\n  },\n  certain: {\n    firstAnswer: values =>\n      `What kind of question is that? Who doesn't know that the most important thing in life is ${\n        values[0]\n      }?`,\n    secondAnswer: values => \"\", // `They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${values[1]}, but that can wait`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n\n  academic: {\n    firstAnswer: values =>\n      `Obviously, from the data, we must conclude that the most important thing in life is ${\n        values[0]\n      }. Do you want to see my 700 page essay that proves this to be the case?`,\n    secondAnswer: values => \"\", //`They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${values[1]}, but that can wait`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  },\n\n  frustrated: {\n    firstAnswer: values =>\n      `Augh, not another stupid philosophical question! Fine! ${capitalise(\n        values[0]\n      )}! Now will you go away and leave me alone?`,\n    secondAnswer: values => \"\", //`They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${values[1]}, but that can wait`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\",\n    optional: values =>\n      \"What, you want more? What is it with you and these dumb questions?\"\n  },\n\n  flirty: {\n    firstAnswer: values =>\n      \"Baby, you know you're the most important thing in my life.\",\n    secondAnswer: values => \"\", //`They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${values[1]}, but that can wait`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n    //optional: //(values)=>'What, you want more? What is it with you and these dumb questions?'\n  },\n  busy: {\n    firstAnswer: values =>\n      `I'm busy, but '${\n        values[0]\n      }' is the simplest answer. I'll tell you more later.`,\n    secondAnswer: values => \"\", //`They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${values[1]}, but that can wait`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n    //optional: //(values)=>'What, you want more? What is it with you and these dumb questions?'\n  },\n\n  jiira: {\n    firstAnswer: values =>\n      `I really like ${values[0]}! Also ${\n        values[1]\n      }! Also you! You're pretty great you know!`,\n    secondAnswer: values => \"\", //`They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${values[1]}, but that can wait`,\n    interjection: \"\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n    //optional: //(values)=>'What, you want more? What is it with you and these dumb questions?'\n  },\n\n  loud: {\n    firstAnswer: values =>\n      `WELL, settle down and I'll tell ye why I love me ${values[0]}!`,\n    secondAnswer: values =>\n      `Then if ye'll listen I'll talk ye ear off about ${values[1]} as well!`, //`They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${values[1]}, but that can wait`,\n    interjection: \"OH AYE, this's what yer doing now, is it?\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n    //optional: //(values)=>'What, you want more? What is it with you and these dumb questions?'\n  },\n  russian: {\n    firstAnswer: values => `Think is '${values[0]}'.`,\n    secondAnswer: values => `Maybe is '${values[1]}'.`, //`They raise an eyebrow. \"Oh, you want more? I suppose I'd also like ${values[1]}, but that can wait`,\n    interjection: \"Is strange question.\",\n    considering: \"\",\n    certain: \"\",\n    address: \"\",\n    yes: \"sure thing!\",\n    no: \"nope\"\n  }\n};\n\nconst traitVoiceMap = {\n  elegant: { agreeableness: \"high\" },\n  elegant2: { agreeableness: \"high\" },\n  crotchety: { agreeableness: \"low\" },\n  joyful: { agreeableness: \"high\", neuroticism: \"notHigh\" },\n  terse: { extroversion: \"low\", agreeableness: \"notHigh\" },\n  silly: { openness: \"high\", agreeableness: \"high\" },\n  longWinded: { extroversion: \"high\" },\n  gloomy: { neuroticism: \"high\" },\n  southern: { extroversion: \"notLow\", agreeableness: \"notLow\" },\n  informal: { neuroticism: \"notHigh\", agreeableness: \"notLow\" },\n  intellectual: { openness: \"high\" },\n  sly: {},\n  reluctantProtag: { agreeableness: \"notLow\" },\n  oldGay: { agreeableness: \"notLow\" },\n  contrary: { agreeableness: \"low\" },\n  practical: { agreeableness: \"notLow\" },\n  pompous: { agreeableness: \"notHigh\" },\n  grizzled: { agreeableness: \"high\" },\n  other: { agreeableness: \"middle\", openness: \"high\" },\n  rude: { agreeableness: \"low\" },\n  certain: {\n    agreeableness: \"notHigh\",\n    neuroticism: \"notLow\",\n    openness: \"notHigh\"\n  },\n  academic: { agreeableness: \"middle\", openness: \"high\" },\n  frustrated: { agreeableness: \"notHigh\", openness: \"notHigh\" },\n  flirty: { extroversion: \"high\" },\n  busy: { conscientiousness: \"high\", extroversion: \"low\" },\n  jiira: { extroversion: \"high\", agreeableness: \"high\" },\n  loud: {\n    extroversion: \"high\",\n    agreeableness: \"notLow\",\n    neuroticism: \"notLow\"\n  },\n  russian: {}\n};\n\nexport { vocabulary, traitVoiceMap };\n","import { vocabulary, traitVoiceMap } from \"../datasets/vocabularies\";\nimport listRand from \"../utils/list-random\";\n\nfunction getVocab(scores) {\n  console.log(scores);\n  const vocabName = listRand(Object.keys(vocabulary));\n  const vocab = vocabulary[vocabName];\n  const requirements = traitVoiceMap[vocabName];\n  let meetsRequirements = true;\n\n  for (let trait in requirements) {\n    const wordDescription = requirements[trait];\n    console.log(wordDescription, \"trait\", trait, \"score\", scores[trait]);\n    if (meetsRequirements) {\n      switch (wordDescription) {\n        case \"high\":\n          meetsRequirements = scores[trait] > 0.7;\n          break;\n        case \"low\":\n          meetsRequirements = scores[trait] < 0.3;\n          break;\n        case \"notHigh\":\n          meetsRequirements = scores[trait] < 0.7;\n          break;\n        case \"notLow\":\n          meetsRequirements = scores[trait] > 0.3;\n          break;\n        case \"middle\":\n          meetsRequirements = scores[trait] > 0.3 && scores[trait] < 0.7;\n      }\n    }\n  }\n  if (meetsRequirements === true) {\n    return vocab;\n  }\n  return getVocab(scores);\n}\n\nexport default getVocab;\n","import React, { Component } from \"react\";\n\nclass List extends Component {\n  render() {\n    const { className, children, items, itemClass } = this.props;\n    return (\n      <ul className={className}>\n        {items\n          ? items.map(item => <li className={itemClass}>{item}</li>)\n          : children}\n      </ul>\n    );\n  }\n}\nexport default List;\n","import React, { Component } from \"react\";\n\nclass Box extends Component {\n  render() {\n    const { className, wrap } = this.props;\n    return (\n      <div\n        className={`box ${className ? className : \"\"} ${wrap ? \"wrap\" : \"\"}`}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\nexport default Box;\n","import React, { Component } from \"react\";\nimport Box from \"./box\";\n\nclass Brackets extends Component {\n  render() {\n    return (\n      <Box className=\"bracket-text\">\n        <span className=\"bracket\">[</span>\n        {this.props.children}\n        <span className=\"bracket\">]</span>\n      </Box>\n    );\n  }\n}\nexport default Brackets;\n","import React, { Component } from \"react\";\nimport { titleCase, capitalise } from \"../../utils/caps-formatter\";\nimport List from \"./list\";\nimport Box from \"./box\";\nimport Brackets from \"./brackets\";\n\nclass Description extends Component {\n  render() {\n    const { name, age, gender, race, charClass } = this.props;\n    const classes =\n      typeof charClass === \"object\" ? charClass.join(\" and \") : charClass;\n    const info = gender\n      ? [age.descriptor, gender, race, classes]\n      : [age.descriptor, race, classes];\n    const descriptors = info.map(titleCase);\n    return (\n      <>\n        <h1 className=\"name\">{titleCase(name.fullName)}</h1>\n        <Box className=\"wrap-descriptor\">\n          <Brackets>\n            <List\n              className=\"descriptors\"\n              items={descriptors}\n              itemClass=\"descriptor\"\n            />\n          </Brackets>\n        </Box>\n      </>\n    );\n  }\n}\nexport default Description;\n","import React, { Component } from \"react\";\nimport Box from \"./box\";\nimport List from \"./list\";\n\nclass StatList extends Component {\n  render() {\n    const { stats } = this.props;\n    return (\n      <Box>\n        <List className=\"stats\">\n          {Object.keys(stats).map(stat => (\n            <li className=\"stat\">\n              <Box>\n                <Box className=\"stat-number\">{stats[stat]}</Box>\n                <Box className=\"circle-desc\">{stat}</Box>\n              </Box>\n            </li>\n          ))}\n        </List>\n      </Box>\n    );\n  }\n}\nexport default StatList;\n","import React, { Component } from \"react\";\nimport Box from \"./box\";\nimport List from \"./list\";\nimport listRand from \"../../utils/list-random\";\nimport { vocabulary } from \"../../datasets/vocabularies\";\nimport { capitalise } from \"../../utils/caps-formatter\";\nimport _ from \"lodash\";\n\nclass VoiceText extends Component {\n  render() {\n    const { values, name, vocabulary } = this.props;\n    const vocab = vocabulary;\n    return (\n      <Box className=\"voice glass-box\">\n        <Box className=\"voice-intro\">\n          When asked what they value most highly, {capitalise(name.first)} says\n        </Box>\n        <Box className=\"value-statement\">\n          \"{vocab.interjection} {vocab.address} {vocab.firstAnswer(values)}{\" \"}\n          {vocab.secondAnswer(values)}{\" \"}\n          {listRand([vocab.certain, vocab.considering])}\"\n        </Box>\n      </Box>\n    );\n  }\n}\nexport default VoiceText;\n","import React, { Component } from \"react\";\nimport Box from \"./box\";\n\nclass InfoBox extends Component {\n  render() {\n    const { children } = this.props;\n\n    return <Box className=\"glass-box info-box\">{children}</Box>;\n  }\n}\nexport default InfoBox;\n","import React, { Component } from \"react\";\nimport Box from \"./box\";\nimport _ from \"lodash\";\nimport List from \"./list\";\nimport listRand from \"../../utils/list-random\";\n\nclass Traits extends Component {\n  render() {\n    const { traits } = this.props;\n    const traitsList = _.get(this.props, \"traits.traitsList\");\n\n    const times = [\n      \" when put under pressure\",\n      \" when bored\",\n      \" infrequently\",\n      \" deep inside\",\n      \" when not feeling threatened\",\n      \" on special occasions\",\n      \" on the surface\",\n      \" when with certain others\",\n      \" with new people\",\n      \" when left alone\",\n      \" when tired\"\n    ];\n\n    return (\n      <Box className=\"traits\">\n        <List>\n          {traitsList &&\n            Object.keys(traitsList).map(\n              trait =>\n                (traits.scores[trait] > 0.6 || traits.scores[trait] < 0.4) && (\n                  <li className=\"stat\">\n                    <Box>\n                      <Box className=\"stat-number\">\n                        {trait[0].toUpperCase()}\n                      </Box>\n                      <Box className=\"circle-desc\">\n                        {traitsList[trait]}{\" \"}\n                        {traits.scores[trait] < 0.7 &&\n                          traits.scores[trait] > 0.3 &&\n                          ` but only ${listRand(times)}`}\n                      </Box>\n                    </Box>\n                  </li>\n                )\n            )}\n        </List>\n      </Box>\n    );\n  }\n}\nexport default Traits;\n","import React, { Component } from \"react\";\nimport Box from \"./box\";\nimport _ from \"lodash\";\nimport { capitalise } from \"../../utils/caps-formatter\";\n\nclass Alignment extends Component {\n  render() {\n    const lawAxis = _.get(this.props, \"alignment.lawAxis\", \" \");\n    const goodAxis = _.get(this.props, \"alignment.goodAxis\", \" \");\n    const full = _.get(this.props, \"alignment.full\", \" \");\n    const acronym =\n      full !== \"true neutral\"\n        ? lawAxis[0].toUpperCase() + goodAxis[0].toUpperCase()\n        : \"TN\";\n    return (\n      <Box className=\"alignment\">\n        {capitalise(lawAxis)} <Box className=\"alignment-acronym\">{acronym}</Box>{\" \"}\n        {capitalise(goodAxis)}\n      </Box>\n    );\n  }\n}\nexport default Alignment;\n","import charSheetFile from \"../resources/character_sheet.pdf\";\n\nexport default function getPDF() {\n  const reader = new FileReader();\n\n  reader.onloadend = function() {\n    console.log(reader.result);\n    //pdfform(\"pdf.js\").list_fields(reader.result); //this is an ArrayBuffer\n  };\n  fetch(charSheetFile).then(r =>\n    r.blob().then(blop => reader.readAsArrayBuffer(blop))\n  );\n}\n","import React, { Component } from \"react\";\nimport getPdf from \"../../utils/pdf\";\n\nclass CharacterSheet extends Component {\n  render() {\n    // const { } = this.props;\n    return (\n      <button className=\"button\" onClick={getPdf}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\nexport default CharacterSheet;\n","import React, { Component } from \"react\";\nimport getRace from \"../../genfuncs/get-race\";\nimport getName from \"../../genfuncs/get-name\";\nimport getGender from \"../../genfuncs/get-gender\";\nimport rollStats from \"../../genfuncs/roll-stats\";\nimport getClass from \"../../genfuncs/get-class\";\nimport getAge from \"../../genfuncs/get-age\";\nimport getAlignment from \"../../genfuncs/get-alignment\";\nimport getLikes from \"../../genfuncs/get-likes\";\nimport getValues from \"../../genfuncs/get-values\";\nimport getGoals from \"../../genfuncs/get-goals\";\nimport getTraits from \"../../genfuncs/get-traits\";\nimport getVocab from \"../../genfuncs/get-vocab\";\n\nimport Description from \"../components/description\";\nimport StatList from \"../components/stat-list\";\nimport Box from \"../components/box\";\nimport VoiceText from \"../components/voice-text\";\nimport InfoBox from \"../components/info-box\";\nimport List from \"../components/list\";\nimport Traits from \"../components/traits\";\nimport Alignment from \"../components/alignment\";\nimport CharacterSheet from \"../components/character-sheet\";\n\nclass Character extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      race: \"\",\n      name: \"\",\n      gender: \"\",\n      stats: \"\",\n      charClass: \"\",\n      age: \"\",\n      alignment: \"\",\n      likes: [],\n      dislikes: [],\n      values: [],\n      goals: \"\",\n      vocab: {\n        firstAnswer: values => \"\",\n        secondAnswer: values => \"\",\n        interjection: \"\",\n        considering: \"\",\n        certain: \"\",\n        address: \"\",\n        yes: \"\",\n        no: \"\"\n      }\n    };\n\n    this.makeCharacter = this.makeCharacter.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  makeCharacter() {\n    window.scrollTo(0, 0);\n    const race = getRace();\n    const gender = getGender();\n    const name = getName(gender, race);\n    const stats = rollStats();\n    const age = getAge();\n    const { charClass, adjustedStats } = getClass(stats, age.descriptor);\n    const alignment = getAlignment();\n    const { likes, dislikes } = getLikes();\n    const values = getValues(alignment);\n    const goals = getGoals(values);\n    const traits = getTraits(alignment.lawAxis, stats);\n    const vocab = getVocab(traits.scores);\n    this.setState({\n      stats: adjustedStats,\n      traits,\n      vocab,\n      goals,\n      values,\n      likes,\n      dislikes,\n      alignment,\n      race,\n      name,\n      gender,\n      age,\n      charClass\n    });\n  }\n\n  componentDidMount() {\n    this.makeCharacter();\n  }\n\n  handleClick() {\n    this.makeCharacter();\n  }\n\n  getJson() {\n    return (\n      \"data:text/json;charset=utf-8,\" +\n      encodeURIComponent(JSON.stringify(this.state))\n    );\n  }\n\n  render() {\n    const {\n      traits,\n      vocab,\n      goals,\n      values,\n      race,\n      name,\n      gender,\n      stats,\n      charClass,\n      age,\n      alignment,\n      likes,\n      dislikes\n    } = this.state;\n    console.log(\"render\", name);\n    return (\n      <Box className=\"appWrapper\">\n        <Description\n          name={name}\n          age={age}\n          charClass={charClass}\n          race={race}\n          gender={gender}\n        />\n\n        <Box className=\"statsNshit\">\n          <Box className=\"stat-list\">\n            <StatList stats={stats} />\n            <Alignment alignment={alignment} />\n          </Box>\n          <VoiceText name={name} values={values} vocabulary={vocab} />\n        </Box>\n\n        <Box className=\"bottom-info wrap\">\n          <InfoBox>\n            <div>LIKES</div>\n            <List items={likes} />\n          </InfoBox>\n          <InfoBox>\n            <div>DISLIKES</div>\n            <List items={dislikes} />\n          </InfoBox>\n          <InfoBox>\n            <div>GOALS</div>\n            <Box>{goals}</Box>\n          </InfoBox>\n\n          <Traits traits={traits} />\n        </Box>\n        <Box className=\"options\">\n          <button onClick={this.handleClick} className=\"button\">\n            New Character!\n          </button>\n          <Box className=\"button\">\n            <a href={this.getJson()} download={`${name.fullName}.json`}>\n              Download Character as JSON\n            </a>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n}\nexport default Character;\n","import likesInfo from \"../datasets/likes.json\";\nimport randomDraw from \"../utils/random-draw\";\n\nexport default function getLikes() {\n  const likesList = randomDraw(likesInfo, 6);\n\n  const likes = likesList.slice(0, 3);\n  const dislikes = likesList.slice(3);\n\n  return { likes, dislikes };\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport InitialTest from './view/screens/character';\n\nclass App extends Component {\n  render() {\n    return (\n    \t<div className='App'>\n        <InitialTest/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}